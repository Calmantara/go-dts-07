// Code generated by MockGen. DO NOT EDIT.
// Source: modules/repository/account/account.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	account "github.com/Calmantara/go-account/modules/models/account"
	gomock "github.com/golang/mock/gomock"
)

// MockIAccountRepo is a mock of IAccountRepo interface.
type MockIAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountRepoMockRecorder
}

// MockIAccountRepoMockRecorder is the mock recorder for MockIAccountRepo.
type MockIAccountRepoMockRecorder struct {
	mock *MockIAccountRepo
}

// NewMockIAccountRepo creates a new mock instance.
func NewMockIAccountRepo(ctrl *gomock.Controller) *MockIAccountRepo {
	mock := &MockIAccountRepo{ctrl: ctrl}
	mock.recorder = &MockIAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountRepo) EXPECT() *MockIAccountRepoMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockIAccountRepo) CreateAccount(ctx context.Context, acc account.Account) (account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, acc)
	ret0, _ := ret[0].(account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockIAccountRepoMockRecorder) CreateAccount(ctx, acc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockIAccountRepo)(nil).CreateAccount), ctx, acc)
}

// GetAccountByUserID mocks base method.
func (m *MockIAccountRepo) GetAccountByUserID(ctx context.Context, userId string) (account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUserID", ctx, userId)
	ret0, _ := ret[0].(account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUserID indicates an expected call of GetAccountByUserID.
func (mr *MockIAccountRepoMockRecorder) GetAccountByUserID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUserID", reflect.TypeOf((*MockIAccountRepo)(nil).GetAccountByUserID), ctx, userId)
}

// GetAccountByUserName mocks base method.
func (m *MockIAccountRepo) GetAccountByUserName(ctx context.Context, username string) (account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUserName", ctx, username)
	ret0, _ := ret[0].(account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUserName indicates an expected call of GetAccountByUserName.
func (mr *MockIAccountRepoMockRecorder) GetAccountByUserName(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUserName", reflect.TypeOf((*MockIAccountRepo)(nil).GetAccountByUserName), ctx, username)
}
